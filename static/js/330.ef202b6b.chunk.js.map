{"version":3,"file":"static/js/330.ef202b6b.chunk.js","mappings":"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","sources":["components/Resume/Education/Degree.js","components/Resume/Education.js","../node_modules/markdown-to-jsx/index.tsx","components/Resume/Experience/Job.js","components/Resume/Experience.js","components/Resume/References.js","data/resume/degrees.js","data/resume/work.js","pages/Resume.js","../node_modules/dayjs/dayjs.min.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Degree = ({ data }) => (\n  <article className=\"degree-container\">\n    <header>\n      <h4 className=\"degree\">{data.degree}</h4>\n      <p className=\"school\"><a href={data.link}>{data.school}</a>, {data.year}</p>\n    </header>\n  </article>\n);\n\nDegree.propTypes = {\n  data: PropTypes.shape({\n    degree: PropTypes.string.isRequired,\n    link: PropTypes.string.isRequired,\n    school: PropTypes.string.isRequired,\n    year: PropTypes.number.isRequired,\n  }).isRequired,\n};\n\nexport default Degree;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Degree from './Education/Degree';\n\nconst Education = ({ data }) => (\n  <div className=\"education\">\n    <div className=\"link-to\" id=\"education\" />\n    <div className=\"title\">\n      <h3>Education</h3>\n    </div>\n    {data.map((degree) => (\n      <Degree\n        data={degree}\n        key={degree.school}\n      />\n    ))}\n  </div>\n);\n\nEducation.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    school: PropTypes.string,\n    degree: PropTypes.string,\n    link: PropTypes.string,\n    year: PropTypes.number,\n  })),\n};\n\nEducation.defaultProps = {\n  data: [],\n};\n\nexport default Education;\n","/* @jsx h */\n/**\n * markdown-to-jsx is a fork of [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome and extensible\n * parsing infra... without it, half of the optimizations here wouldn't be feasible. 🙏🏼\n */\nimport * as React from 'react'\n\nexport namespace MarkdownToJSX {\n  /**\n   * RequireAtLeastOne<{ ... }> <- only requires at least one key\n   */\n  type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n    T,\n    Exclude<keyof T, Keys>\n  > &\n    {\n      [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n    }[Keys]\n\n  export type CreateElement = typeof React.createElement\n\n  export type HTMLTags = keyof JSX.IntrinsicElements\n\n  export type State = {\n    _inAnchor?: boolean\n    _inline?: boolean\n    _inTable?: boolean\n    _key?: React.Key\n    _list?: boolean\n    _simple?: boolean\n  }\n\n  export type ParserResult = {\n    [key: string]: any\n    type?: string\n  }\n\n  export type NestedParser = (\n    input: string,\n    state?: MarkdownToJSX.State\n  ) => MarkdownToJSX.ParserResult\n\n  export type Parser<ParserOutput> = (\n    capture: RegExpMatchArray,\n    nestedParse: NestedParser,\n    state?: MarkdownToJSX.State\n  ) => ParserOutput\n\n  export type RuleOutput = (\n    ast: MarkdownToJSX.ParserResult,\n    state: MarkdownToJSX.State\n  ) => JSX.Element\n\n  export type Rule<ParserOutput = MarkdownToJSX.ParserResult> = {\n    _match: (\n      source: string,\n      state: MarkdownToJSX.State,\n      prevCapturedString?: string\n    ) => RegExpMatchArray\n    _order: Priority\n    _parse: MarkdownToJSX.Parser<ParserOutput>\n    _react?: (\n      node: ParserOutput,\n      output: RuleOutput,\n      state?: MarkdownToJSX.State\n    ) => React.ReactChild\n  }\n\n  export type Rules = {\n    [key: string]: Rule\n  }\n\n  export type Override =\n    | RequireAtLeastOne<{\n        component: React.ElementType\n        props: Object\n      }>\n    | React.ElementType\n\n  export type Overrides = {\n    [tag in HTMLTags]?: Override\n  } & {\n    [customComponent: string]: Override\n  }\n\n  export type Options = Partial<{\n    /**\n     * Ultimate control over the output of all rendered JSX.\n     */\n    createElement: (\n      tag: Parameters<CreateElement>[0],\n      props: JSX.IntrinsicAttributes,\n      ...children: React.ReactChild[]\n    ) => JSX.Element\n\n    /**\n     * Disable the compiler's best-effort transcription of provided raw HTML\n     * into JSX-equivalent. This is the functionality that prevents the need to\n     * use `dangerouslySetInnerHTML` in React.\n     */\n    disableParsingRawHTML: boolean\n\n    /**\n     * Forces the compiler to always output content with a block-level wrapper\n     * (`<p>` or any block-level syntax your markdown already contains.)\n     */\n    forceBlock: boolean\n\n    /**\n     * Forces the compiler to always output content with an inline wrapper (`<span>`)\n     */\n    forceInline: boolean\n\n    /**\n     * Supply additional HTML entity: unicode replacement mappings.\n     *\n     * Pass only the inner part of the entity as the key,\n     * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n     *\n     * By default\n     * the following entities are replaced with their unicode equivalents:\n     *\n     * ```\n     * &amp;\n     * &apos;\n     * &gt;\n     * &lt;\n     * &nbsp;\n     * &quot;\n     * ```\n     */\n    namedCodesToUnicode: {\n      [key: string]: string\n    }\n\n    /**\n     * Selectively control the output of particular HTML tags as they would be\n     * emitted by the compiler.\n     */\n    overrides: Overrides\n\n    /**\n     * Declare the type of the wrapper to be used when there are multiple\n     * children to render. Set to `null` to get an array of children back\n     * without any wrapper, or use `React.Fragment` to get a React element\n     * that won't show up in the DOM.\n     */\n    wrapper: React.ElementType | null\n\n    /**\n     * Forces the compiler to wrap results, even if there is only a single\n     * child or no children.\n     */\n    forceWrapper: boolean\n\n    /**\n     * Override normalization of non-URI-safe characters for use in generating\n     * HTML IDs for anchor linking purposes.\n     */\n    slugify: (source: string) => string\n  }>\n}\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = [\n  'allowFullScreen',\n  'allowTransparency',\n  'autoComplete',\n  'autoFocus',\n  'autoPlay',\n  'cellPadding',\n  'cellSpacing',\n  'charSet',\n  'className',\n  'classId',\n  'colSpan',\n  'contentEditable',\n  'contextMenu',\n  'crossOrigin',\n  'encType',\n  'formAction',\n  'formEncType',\n  'formMethod',\n  'formNoValidate',\n  'formTarget',\n  'frameBorder',\n  'hrefLang',\n  'inputMode',\n  'keyParams',\n  'keyType',\n  'marginHeight',\n  'marginWidth',\n  'maxLength',\n  'mediaGroup',\n  'minLength',\n  'noValidate',\n  'radioGroup',\n  'readOnly',\n  'rowSpan',\n  'spellCheck',\n  'srcDoc',\n  'srcLang',\n  'srcSet',\n  'tabIndex',\n  'useMap',\n].reduce(\n  (obj, x) => {\n    obj[x.toLowerCase()] = x\n    return obj\n  },\n  { for: 'htmlFor' }\n)\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script']\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ↳ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ↓                ↳ disabled: true\n *                     ↳ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ↳ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R =\n  /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:( *[-*_])){3,} *(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R =\n  /^\\s*(`{3,}|~{3,}) *(\\S+)?([^\\n]*?)?\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)*\\n?/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:.*)\\n/\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)\\/{0}>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R =\n  /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?([^>]*)\\/{0}>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1)[\\s\\S])*?)<\\/\\1>\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-zA-Z]+);/g\n\nconst HTML_COMMENT_R = /^<!--[\\s\\S]*?(?:-->)/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R =\n  /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R = /^(.*\\|?.*)\\n *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*)\\n?/\nconst PARAGRAPH_R = /^[^\\n]+(?:  \\n|\\n{2,})/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s+<?([^\\s>]+)>?\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SQUARE_BRACKETS_R = /(\\[|\\])/g\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_SEPARATOR_R = /^ *\\| */\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CELL_END_TRIM = / *$/\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\n\nconst TEXT_BOLD_R =\n  /^([*_])\\1((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1\\1(?!\\1)/\nconst TEXT_EMPHASIZED_R =\n  /^([*_])((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1(?!\\1|\\w)/\nconst TEXT_MARKED_R = /^==((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)==/\nconst TEXT_STRIKETHROUGHED_R = /^~~((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\nconst TEXT_PLAIN_R =\n  /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i\n\nconst TRIM_STARTING_NEWLINES = /^\\n+/\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\nconst UNESCAPE_URL_R = /\\\\([^\\\\])/g\n\ntype LIST_TYPE = 1 | 2\nconst ORDERED: LIST_TYPE = 1\nconst UNORDERED: LIST_TYPE = 2\n\nconst LIST_ITEM_END_R = / *\\n+$/\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst ORDERED_LIST_BULLET = '(?:\\\\d+\\\\.)'\nconst UNORDERED_LIST_BULLET = '(?:[*+-])'\n\nfunction generateListItemPrefix(type: LIST_TYPE) {\n  return (\n    '( *)(' +\n    (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n    ') +'\n  )\n}\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst ORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(UNORDERED)\n\nfunction generateListItemPrefixRegex(type: LIST_TYPE) {\n  return new RegExp(\n    '^' +\n      (type === ORDERED ? ORDERED_LIST_ITEM_PREFIX : UNORDERED_LIST_ITEM_PREFIX)\n  )\n}\n\nconst ORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(UNORDERED)\n\nfunction generateListItemRegex(type: LIST_TYPE) {\n  // recognize an individual list item:\n  //  * hi\n  //    this is part of the same item\n  //\n  //    as is this, which is a new paragraph in the same item\n  //\n  //  * but this is not part of the same item\n  return new RegExp(\n    '^' +\n      (type === ORDERED\n        ? ORDERED_LIST_ITEM_PREFIX\n        : UNORDERED_LIST_ITEM_PREFIX) +\n      '[^\\\\n]*(?:\\\\n' +\n      '(?!\\\\1' +\n      (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n      ' )[^\\\\n]*)*(\\\\n|$)',\n    'gm'\n  )\n}\n\nconst ORDERED_LIST_ITEM_R = generateListItemRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_R = generateListItemRegex(UNORDERED)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nfunction generateListRegex(type: LIST_TYPE) {\n  const bullet = type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET\n\n  return new RegExp(\n    '^( *)(' +\n      bullet +\n      ') ' +\n      '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n      '(?!\\\\1' +\n      bullet +\n      ' (?!' +\n      bullet +\n      ' ))\\\\n*' +\n      // the \\\\s*$ here is so that we can parse the inside of nested\n      // lists, where our content might end before we receive two `\\n`s\n      '|\\\\s*\\\\n*$)'\n  )\n}\n\nconst ORDERED_LIST_R = generateListRegex(ORDERED)\nconst UNORDERED_LIST_R = generateListRegex(UNORDERED)\n\nfunction generateListRule(h: any, type: LIST_TYPE) {\n  const ordered = type === ORDERED\n  const LIST_R = ordered ? ORDERED_LIST_R : UNORDERED_LIST_R\n  const LIST_ITEM_R = ordered ? ORDERED_LIST_ITEM_R : UNORDERED_LIST_ITEM_R\n  const LIST_ITEM_PREFIX_R = ordered\n    ? ORDERED_LIST_ITEM_PREFIX_R\n    : UNORDERED_LIST_ITEM_PREFIX_R\n\n  return {\n    _match(source, state, prevCapture) {\n      // We only want to break into a list if we are at the start of a\n      // line. This is to avoid parsing \"hi * there\" with \"* there\"\n      // becoming a part of a list.\n      // You might wonder, \"but that's inline, so of course it wouldn't\n      // start a list?\". You would be correct! Except that some of our\n      // lists can be inline, because they might be inside another list,\n      // in which case we can parse with inline scope, but need to allow\n      // nested lists inside this inline scope.\n      const isStartOfLine = LIST_LOOKBEHIND_R.exec(prevCapture)\n      const isListBlock = state._list || (!state._inline && !state._simple)\n\n      if (isStartOfLine && isListBlock) {\n        source = isStartOfLine[1] + source\n\n        return LIST_R.exec(source)\n      } else {\n        return null\n      }\n    },\n    _order: Priority.HIGH,\n    _parse(capture, parse, state) {\n      const bullet = capture[2]\n      const start = ordered ? +bullet : undefined\n      const items = capture[0]\n        // recognize the end of a paragraph block inside a list item:\n        // two or more newlines at end end of the item\n        .replace(BLOCK_END_R, '\\n')\n        .match(LIST_ITEM_R)\n\n      let lastItemWasAParagraph = false\n      const itemContent = items.map(function (item, i) {\n        // We need to see how far indented the item is:\n        const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n        // And then we construct a regex to \"unindent\" the subsequent\n        // lines of the items by that amount:\n        const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n        // Before processing the item, we need a couple things\n        const content = item\n          // remove indents on trailing lines:\n          .replace(spaceRegex, '')\n          // remove the bullet:\n          .replace(LIST_ITEM_PREFIX_R, '')\n\n        // Handling \"loose\" lists, like:\n        //\n        //  * this is wrapped in a paragraph\n        //\n        //  * as is this\n        //\n        //  * as is this\n        const isLastItem = i === items.length - 1\n        const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n        // Any element in a list is a block if it contains multiple\n        // newlines. The last element in the list can also be a block\n        // if the previous item in the list was a block (this is\n        // because non-last items in the list can end with \\n\\n, but\n        // the last item can't, so we just \"inherit\" this property\n        // from our previous element).\n        const thisItemIsAParagraph =\n          containsBlocks || (isLastItem && lastItemWasAParagraph)\n        lastItemWasAParagraph = thisItemIsAParagraph\n\n        // backup our state for restoration afterwards. We're going to\n        // want to set state._list to true, and state._inline depending\n        // on our list's looseness.\n        const oldStateInline = state._inline\n        const oldStateList = state._list\n        state._list = true\n\n        // Parse inline if we're in a tight list, or block if we're in\n        // a loose list.\n        let adjustedContent\n        if (thisItemIsAParagraph) {\n          state._inline = false\n          adjustedContent = content.replace(LIST_ITEM_END_R, '\\n\\n')\n        } else {\n          state._inline = true\n          adjustedContent = content.replace(LIST_ITEM_END_R, '')\n        }\n\n        const result = parse(adjustedContent, state)\n\n        // Restore our state before returning\n        state._inline = oldStateInline\n        state._list = oldStateList\n\n        return result\n      })\n\n      return {\n        _items: itemContent,\n        _ordered: ordered,\n        _start: start,\n      }\n    },\n    _react(node, output, state) {\n      const Tag = node._ordered ? 'ol' : 'ul'\n\n      return (\n        <Tag key={state._key} start={node._start}>\n          {node._items.map(function generateListItem(item, i) {\n            return <li key={i}>{output(item, state)}</li>\n          })}\n        </Tag>\n      )\n    },\n  } as MarkdownToJSX.Rule<{\n    _items: MarkdownToJSX.ParserResult[]\n    _ordered: boolean\n    _start?: number\n  }>\n}\n\nconst LINK_R = /^\\[([^\\]]*)]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/\nconst IMAGE_R = /^!\\[([^\\]]*)]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/\n\nconst NON_PARAGRAPH_BLOCK_SYNTAXES = [\n  BLOCKQUOTE_R,\n  CODE_BLOCK_FENCED_R,\n  CODE_BLOCK_R,\n  HEADING_R,\n  HEADING_SETEXT_R,\n  HTML_COMMENT_R,\n  NP_TABLE_R,\n  ORDERED_LIST_ITEM_R,\n  ORDERED_LIST_R,\n  UNORDERED_LIST_ITEM_R,\n  UNORDERED_LIST_R,\n]\n\nconst BLOCK_SYNTAXES = [\n  ...NON_PARAGRAPH_BLOCK_SYNTAXES,\n  PARAGRAPH_R,\n  HTML_BLOCK_ELEMENT_R,\n  HTML_SELF_CLOSING_ELEMENT_R,\n]\n\nfunction containsBlockSyntax(input: string) {\n  return BLOCK_SYNTAXES.some(r => r.test(input))\n}\n\n/** Remove symmetrical leading and trailing quotes */\nfunction unquote(str: string) {\n  const first = str[0]\n  if (\n    (first === '\"' || first === \"'\") &&\n    str.length >= 2 &&\n    str[str.length - 1] === first\n  ) {\n    return str.slice(1, -1)\n  }\n  return str\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nfunction slugify(str: string) {\n  return str\n    .replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a')\n    .replace(/[çÇ]/g, 'c')\n    .replace(/[ðÐ]/g, 'd')\n    .replace(/[ÈÉÊËéèêë]/g, 'e')\n    .replace(/[ÏïÎîÍíÌì]/g, 'i')\n    .replace(/[Ññ]/g, 'n')\n    .replace(/[øØœŒÕõÔôÓóÒò]/g, 'o')\n    .replace(/[ÜüÛûÚúÙù]/g, 'u')\n    .replace(/[ŸÿÝý]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const prevInTable = state._inTable\n  state._inTable = true\n  const tableRow = parse(source.trim(), state)\n  state._inTable = prevInTable\n\n  let cells = [[]]\n  tableRow.forEach(function (node, i) {\n    if (node.type === 'tableSeparator') {\n      // Filter out empty table separators at the start/end:\n      if (i !== 0 && i !== tableRow.length - 1) {\n        // Split the current row:\n        cells.push([])\n      }\n    } else {\n      if (\n        node.type === 'text' &&\n        (tableRow[i + 1] == null || tableRow[i + 1].type === 'tableSeparator')\n      ) {\n        node._content = node._content.replace(TABLE_CELL_END_TRIM, '')\n      }\n      cells[cells.length - 1].push(node)\n    }\n  })\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function (rowText) {\n    return parseTableRow(rowText, parse, state)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  state._inline = true\n  const header = parseTableRow(capture[1], parse, state)\n  const align = parseTableAlign(capture[2])\n  const cells = parseTableCells(capture[3], parse, state)\n  state._inline = false\n\n  return {\n    _align: align,\n    _cells: cells,\n    _header: header,\n    type: 'table',\n  }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node._align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node._align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\nfunction attributeValueToJSXPropValue(\n  key: keyof React.AllHTMLAttributes<Element>,\n  value: string\n): any {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function (styles, kvPair) {\n      const key = kvPair.slice(0, kvPair.indexOf(':'))\n\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key.replace(/(-[a-z])/g, substr =>\n        substr[1].toUpperCase()\n      )\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim()\n\n      return styles\n    }, {})\n  } else if (key === 'href') {\n    return sanitizeUrl(value)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = value.slice(1, value.length - 1)\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: MarkdownToJSX.Rules\n): (\n  source: string,\n  state: MarkdownToJSX.State\n) => ReturnType<MarkdownToJSX.NestedParser> {\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  let ruleList = Object.keys(rules)\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function (type) {\n      let order = rules[type]._order\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (typeof order !== 'number' || !isFinite(order))\n      ) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  ruleList.sort(function (typeA, typeB) {\n    let orderA = rules[typeA]._order\n    let orderB = rules[typeB]._order\n\n    // First sort based on increasing order\n    if (orderA !== orderB) {\n      return orderA - orderB\n\n      // Then based on increasing unicode lexicographic ordering\n    } else if (typeA < typeB) {\n      return -1\n    }\n\n    return 1\n  })\n\n  function nestedParse(\n    source: string,\n    state: MarkdownToJSX.State\n  ): MarkdownToJSX.ParserResult[] {\n    let result = []\n\n    // We store the previous capture so that match functions can\n    // use some limited amount of lookbehind. Lists use this to\n    // ensure they don't match arbitrary '- ' or '* ' in inline\n    // text (see the list rule for more information).\n    let prevCapture = ''\n    while (source) {\n      let i = 0\n      while (i < ruleList.length) {\n        const ruleType = ruleList[i]\n        const rule = rules[ruleType]\n        const capture = rule._match(source, state, prevCapture)\n\n        if (capture) {\n          const currCaptureString = capture[0]\n          source = source.substring(currCaptureString.length)\n          const parsed = rule._parse(capture, nestedParse, state)\n\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType\n          }\n\n          result.push(parsed)\n\n          prevCapture = currCaptureString\n          break\n        }\n\n        i++\n      }\n    }\n\n    return result\n  }\n\n  return function outerParse(source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex: RegExp) {\n  return function match(source, state: MarkdownToJSX.State) {\n    if (state._inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state._inline || state._simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state._inline || state._simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex: RegExp) {\n  return function match(source: string /*, state*/) {\n    return regex.exec(source)\n  }\n}\n\nfunction matchParagraph(\n  source: string,\n  state: MarkdownToJSX.State,\n  prevCapturedString?: string\n) {\n  if (state._inline || state._simple) {\n    return null\n  }\n\n  if (prevCapturedString && !prevCapturedString.endsWith('\\n')) {\n    // don't match continuation of a line\n    return null\n  }\n\n  let match = ''\n\n  source.split('\\n').every(line => {\n    // bail out on first sign of non-paragraph block\n    if (NON_PARAGRAPH_BLOCK_SYNTAXES.some(regex => regex.test(line))) {\n      return false\n    }\n    match += line + '\\n'\n    return line.trim()\n  })\n\n  const captured = match.trimEnd()\n  if (captured == '') {\n    return null\n  }\n\n  return [match, captured]\n}\n\nfunction reactFor(outputFunc) {\n  return function nestedReactOutput(\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State = {}\n  ): React.ReactChild[] {\n    if (Array.isArray(ast)) {\n      const oldKey = state._key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state._key = i\n\n        const nodeOut = nestedReactOutput(ast[i], state)\n        const isString = typeof nodeOut === 'string'\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else if (nodeOut !== null) {\n          result.push(nodeOut)\n        }\n\n        lastWasString = isString\n      }\n\n      state._key = oldKey\n\n      return result\n    }\n\n    return outputFunc(ast, nestedReactOutput, state)\n  }\n}\n\nfunction sanitizeUrl(url: string): string | null {\n  try {\n    const decoded = decodeURIComponent(url).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (decoded.match(/^\\s*(javascript|vbscript|data(?!:image)):/i)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Anchor URL contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return null\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        url\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return url\n}\n\nfunction unescapeUrl(rawUrlString: string): string {\n  return rawUrlString.replace(UNESCAPE_URL_R, '$1')\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(\n  parse: MarkdownToJSX.NestedParser,\n  content: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  const isCurrentlyInline = state._inline || false\n  const isCurrentlySimple = state._simple || false\n  state._inline = true\n  state._simple = true\n  const result = parse(content, state)\n  state._inline = isCurrentlyInline\n  state._simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(\n  parse: MarkdownToJSX.NestedParser,\n  content: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  const isCurrentlyInline = state._inline || false\n  const isCurrentlySimple = state._simple || false\n  state._inline = false\n  state._simple = true\n  const result = parse(content, state)\n  state._inline = isCurrentlyInline\n  state._simple = isCurrentlySimple\n  return result\n}\n\nfunction parseBlock(\n  parse,\n  content,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  state._inline = false\n  return parse(content + '\\n\\n', state)\n}\n\nconst parseCaptureInline: MarkdownToJSX.Parser<\n  ReturnType<typeof parseInline>\n> = (capture, parse, state: MarkdownToJSX.State) => {\n  return {\n    _content: parseInline(parse, capture[1], state),\n  }\n}\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction ruleOutput(rules: MarkdownToJSX.Rules) {\n  return function nestedRuleOutput(\n    ast: MarkdownToJSX.ParserResult,\n    outputFunc: MarkdownToJSX.RuleOutput,\n    state: MarkdownToJSX.State\n  ): React.ReactChild {\n    return rules[ast.type]._react(ast, outputFunc, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: MarkdownToJSX.Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nenum Priority {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED,\n  /**\n   * inline elements\n   */\n  LOW,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN,\n}\n\nexport function compiler(\n  markdown: string,\n  options: MarkdownToJSX.Options = {}\n) {\n  options.overrides = options.overrides || {}\n  options.slugify = options.slugify || slugify\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n\n  const createElementFn = options.createElement || React.createElement\n\n  // JSX custom pragma\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: MarkdownToJSX.HTMLTags,\n    props: Parameters<MarkdownToJSX.CreateElement>[1] & {\n      className?: string\n      id?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return createElementFn(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className: cx(props?.className, overrideProps.className) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): JSX.Element {\n    let _inline = false\n\n    if (options.forceInline) {\n      _inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      _inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        _inline\n          ? input\n          : `${input.trimEnd().replace(TRIM_STARTING_NEWLINES, '')}\\n\\n`,\n        {\n          _inline,\n        }\n      )\n    )\n\n    while (\n      typeof arr[arr.length - 1] === 'string' &&\n      !arr[arr.length - 1].trim()\n    ) {\n      arr.pop()\n    }\n\n    if (options.wrapper === null) {\n      return arr\n    }\n\n    const wrapper = options.wrapper || (_inline ? 'span' : 'div')\n    let jsx\n\n    if (arr.length > 1 || options.forceWrapper) {\n      jsx = arr\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        return <span key=\"outer\">{jsx}</span>\n      } else {\n        return jsx\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = null\n    }\n\n    return React.createElement(wrapper, { key: 'outer' }, jsx)\n  }\n\n  function attrStringToMap(str: string): JSX.IntrinsicAttributes {\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n    if (!attributes) {\n      return null\n    }\n\n    return attributes.reduce(function (map, raw, index) {\n      const delimiterIdx = raw.indexOf('=')\n\n      if (delimiterIdx !== -1) {\n        const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n        const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n        const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n        const normalizedValue = (map[mappedKey] = attributeValueToJSXPropValue(\n          key,\n          value\n        ))\n\n        if (\n          typeof normalizedValue === 'string' &&\n          (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n            HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n        ) {\n          map[mappedKey] = React.cloneElement(compile(normalizedValue.trim()), {\n            key: index,\n          })\n        }\n      } else if (raw !== 'style') {\n        map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n      }\n\n      return map\n    }, {})\n  }\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n\n  const footnotes: { _footnote: string; _identifier: string }[] = []\n  const refs: { [key: string]: { _target: string; _title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom h() JSX pragma;\n   * this allows the override functionality to be automatically applied\n   */\n  const rules: MarkdownToJSX.Rules = {\n    blockQuote: {\n      _match: blockRegex(BLOCKQUOTE_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        return {\n          _content: parse(\n            capture[0].replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, ''),\n            state\n          ),\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <blockquote key={state._key}>\n            {output(node._content, state)}\n          </blockquote>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ _content: MarkdownToJSX.ParserResult }>,\n\n    breakLine: {\n      _match: anyScopeRegex(BREAK_LINE_R),\n      _order: Priority.HIGH,\n      _parse: captureNothing,\n      _react(_, __, state) {\n        return <br key={state._key} />\n      },\n    },\n\n    breakThematic: {\n      _match: blockRegex(BREAK_THEMATIC_R),\n      _order: Priority.HIGH,\n      _parse: captureNothing,\n      _react(_, __, state) {\n        return <hr key={state._key} />\n      },\n    },\n\n    codeBlock: {\n      _match: blockRegex(CODE_BLOCK_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _content: capture[0].replace(/^ {4}/gm, '').replace(/\\n+$/, ''),\n          _lang: undefined,\n        }\n      },\n\n      _react(node, output, state) {\n        return (\n          <pre key={state._key}>\n            <code\n              {...node._attrs}\n              className={node._lang ? `lang-${node._lang}` : ''}\n            >\n              {node._content}\n            </code>\n          </pre>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      _attrs?: ReturnType<typeof attrStringToMap>\n      _content: string\n      _lang?: string\n    }>,\n\n    codeFenced: {\n      _match: blockRegex(CODE_BLOCK_FENCED_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          // if capture[3] it's additional metadata\n          _attrs: attrStringToMap(capture[3] || ''),\n          _content: capture[4],\n          _lang: capture[2] || undefined,\n          type: 'codeBlock',\n        }\n      },\n    },\n\n    codeInline: {\n      _match: simpleInlineRegex(CODE_INLINE_R),\n      _order: Priority.LOW,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _content: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return <code key={state._key}>{node._content}</code>\n      },\n    } as MarkdownToJSX.Rule<{ _content: string }>,\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    footnote: {\n      _match: blockRegex(FOOTNOTE_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        footnotes.push({\n          _footnote: capture[2],\n          _identifier: capture[1],\n        })\n\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    footnoteReference: {\n      _match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse*/) {\n        return {\n          _content: capture[1],\n          _target: `#${options.slugify(capture[1])}`,\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <a key={state._key} href={sanitizeUrl(node._target)}>\n            <sup key={state._key}>{node._content}</sup>\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ _content: string; _target: string }>,\n\n    gfmTask: {\n      _match: inlineRegex(GFM_TASK_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <input\n            checked={node._completed}\n            key={state._key}\n            readOnly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ _completed: boolean }>,\n\n    heading: {\n      _match: blockRegex(HEADING_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        return {\n          _content: parseInline(parse, capture[2], state),\n          _id: options.slugify(capture[2]),\n          _level: capture[1].length,\n        }\n      },\n      _react(node, output, state) {\n        return h(\n          `h${node._level}`,\n          { id: node._id, key: state._key },\n          output(node._content, state)\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      _content: MarkdownToJSX.ParserResult\n      _id: string\n      _level: 1 | 2 | 3 | 4 | 5 | 6\n      _tag: MarkdownToJSX.HTMLTags\n    }>,\n\n    headingSetext: {\n      _match: blockRegex(HEADING_SETEXT_R),\n      _order: Priority.MAX,\n      _parse(capture, parse, state) {\n        return {\n          _content: parseInline(parse, capture[1], state),\n          _level: capture[2] === '=' ? 1 : 2,\n          type: 'heading',\n        }\n      },\n    },\n\n    htmlComment: {\n      _match: anyScopeRegex(HTML_COMMENT_R),\n      _order: Priority.HIGH,\n      _parse() {\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    image: {\n      _match: simpleInlineRegex(IMAGE_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _alt: capture[1],\n          _target: unescapeUrl(capture[2]),\n          _title: capture[3],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <img\n            key={state._key}\n            alt={node._alt || undefined}\n            title={node._title || undefined}\n            src={sanitizeUrl(node._target)}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      _alt?: string\n      _target: string\n      _title?: string\n    }>,\n\n    link: {\n      _match: inlineRegex(LINK_R),\n      _order: Priority.LOW,\n      _parse(capture, parse, state) {\n        return {\n          _content: parseSimpleInline(parse, capture[1], state),\n          _target: unescapeUrl(capture[2]),\n          _title: capture[3],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <a\n            key={state._key}\n            href={sanitizeUrl(node._target)}\n            title={node._title}\n          >\n            {output(node._content, state)}\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      _content: MarkdownToJSX.ParserResult\n      _target: string\n      _title?: string\n    }>,\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    linkAngleBraceStyleDetector: {\n      _match: inlineRegex(LINK_AUTOLINK_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _content: [\n            {\n              _content: capture[1],\n              type: 'text',\n            },\n          ],\n          _target: capture[1],\n          type: 'link',\n        }\n      },\n    },\n\n    linkBareUrlDetector: {\n      _match: (source, state) => {\n        if (state._inAnchor) {\n          return null\n        }\n        return inlineRegex(LINK_AUTOLINK_BARE_URL_R)(source, state)\n      },\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _content: [\n            {\n              _content: capture[1],\n              type: 'text',\n            },\n          ],\n          _target: capture[1],\n          _title: undefined,\n          type: 'link',\n        }\n      },\n    },\n\n    linkMailtoDetector: {\n      _match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        let address = capture[1]\n        let target = capture[1]\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target\n        }\n\n        return {\n          _content: [\n            {\n              _content: address.replace('mailto:', ''),\n              type: 'text',\n            },\n          ],\n          _target: target,\n          type: 'link',\n        }\n      },\n    },\n\n    orderedList: generateListRule(h, ORDERED),\n    unorderedList: generateListRule(h, UNORDERED),\n\n    newlineCoalescer: {\n      _match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      _order: Priority.LOW,\n      _parse: captureNothing,\n      _react(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    paragraph: {\n      _match: matchParagraph,\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _react(node, output, state) {\n        return <p key={state._key}>{output(node._content, state)}</p>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    ref: {\n      _match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      _order: Priority.MAX,\n      _parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          _target: capture[2],\n          _title: capture[4],\n        }\n\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    refImage: {\n      _match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      _order: Priority.MAX,\n      _parse(capture) {\n        return {\n          _alt: capture[1] || undefined,\n          _ref: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <img\n            key={state._key}\n            alt={node._alt}\n            src={sanitizeUrl(refs[node._ref]._target)}\n            title={refs[node._ref]._title}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ _alt?: string; _ref: string }>,\n\n    refLink: {\n      _match: inlineRegex(REFERENCE_LINK_R),\n      _order: Priority.MAX,\n      _parse(capture, parse, state) {\n        return {\n          _content: parse(capture[1], state),\n          _fallbackContent: parse(\n            capture[0].replace(SQUARE_BRACKETS_R, '\\\\$1'),\n            state\n          ),\n          _ref: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return refs[node._ref] ? (\n          <a\n            key={state._key}\n            href={sanitizeUrl(refs[node._ref]._target)}\n            title={refs[node._ref]._title}\n          >\n            {output(node._content, state)}\n          </a>\n        ) : (\n          <span key={state._key}>{output(node._fallbackContent, state)}</span>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      _content: MarkdownToJSX.ParserResult\n      _fallbackContent: MarkdownToJSX.ParserResult\n      _ref: string\n    }>,\n\n    table: {\n      _match: blockRegex(NP_TABLE_R),\n      _order: Priority.HIGH,\n      _parse: parseTable,\n      _react(node, output, state) {\n        return (\n          <table key={state._key}>\n            <thead>\n              <tr>\n                {node._header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(node, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {node._cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(node, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseTable>>,\n\n    tableSeparator: {\n      _match: function (source, state) {\n        if (!state._inTable) {\n          return null\n        }\n        return TABLE_SEPARATOR_R.exec(source)\n      },\n      _order: Priority.HIGH,\n      _parse: function () {\n        return { type: 'tableSeparator' }\n      },\n      // These shouldn't be reached, but in case they are, be reasonable:\n      _react() {\n        return ' | '\n      },\n    },\n\n    text: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      _match: anyScopeRegex(TEXT_PLAIN_R),\n      _order: Priority.MIN,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _content: capture[0]\n            // nbsp -> unicode equivalent for named chars\n            .replace(HTML_CHAR_CODE_R, (full, inner) => {\n              return options.namedCodesToUnicode[inner]\n                ? options.namedCodesToUnicode[inner]\n                : full\n            }),\n        }\n      },\n      _react(node /*, output, state*/) {\n        return node._content\n      },\n    } as MarkdownToJSX.Rule<{ _content: string }>,\n\n    textBolded: {\n      _match: simpleInlineRegex(TEXT_BOLD_R),\n      _order: Priority.MED,\n      _parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          _content: parse(capture[2], state),\n        }\n      },\n      _react(node, output, state) {\n        return <strong key={state._key}>{output(node._content, state)}</strong>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<MarkdownToJSX.NestedParser>>,\n\n    textEmphasized: {\n      _match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      _order: Priority.LOW,\n      _parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          _content: parse(capture[2], state),\n        }\n      },\n      _react(node, output, state) {\n        return <em key={state._key}>{output(node._content, state)}</em>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<MarkdownToJSX.NestedParser>>,\n\n    textEscaped: {\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      _match: simpleInlineRegex(TEXT_ESCAPED_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _content: capture[1],\n          type: 'text',\n        }\n      },\n    },\n\n    textMarked: {\n      _match: simpleInlineRegex(TEXT_MARKED_R),\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _react(node, output, state) {\n        return <mark key={state._key}>{output(node._content, state)}</mark>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    textStrikethroughed: {\n      _match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _react(node, output, state) {\n        return <del key={state._key}>{output(node._content, state)}</del>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n  }\n\n  // Object.keys(rules).forEach(key => {\n  //   let { _match: match, _parse: parse } = rules[key]\n\n  //   rules[key]._match = (...args) => {\n  //     const start = performance.now()\n  //     const result = match(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5)\n  //       console.warn(\n  //         `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${args[0]}`\n  //       )\n\n  //     return result\n  //   }\n\n  //   rules[key]._parse = (...args) => {\n  //     const start = performance.now()\n  //     const result = parse(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5)\n  //       console.warn(`Slow parse for ${key}: ${delta.toFixed(3)}ms`)\n\n  //     console.log(`${key}:parse`, `${delta.toFixed(3)}ms`, args[0])\n\n  //     return result\n  //   }\n  // })\n\n  if (options.disableParsingRawHTML !== true) {\n    rules.htmlBlock = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      _match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as MarkdownToJSX.HTMLTags\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1\n\n        state._inAnchor = state._inAnchor || tagName === 'a'\n\n        /**\n         * if another html block is detected within, parse as block,\n         * otherwise parse as inline to pick up any further markdown\n         */\n        const content = noInnerParse\n          ? capture[3]\n          : parseFunc(parse, trimmed, state)\n\n        state._inAnchor = false\n\n        return {\n          _attrs: attrStringToMap(capture[2]),\n          _content: content,\n          _noInnerParse: noInnerParse,\n          _tag: noInnerParse ? tagName : capture[1],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          // @ts-ignore\n          <node._tag key={state._key} {...node._attrs}>\n            {node._noInnerParse\n              ? (node._content as string)\n              : output(node._content as MarkdownToJSX.ParserResult, state)}\n          </node._tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      _attrs: ReturnType<typeof attrStringToMap>\n      _content: string | ReturnType<MarkdownToJSX.NestedParser>\n      _noInnerParse: Boolean\n      _tag: string\n    }>\n\n    rules.htmlSelfClosing = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      _match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _attrs: attrStringToMap(capture[2] || ''),\n          _tag: capture[1],\n        }\n      },\n      _react(node, output, state) {\n        return <node._tag {...node._attrs} key={state._key} />\n      },\n    } as MarkdownToJSX.Rule<{\n      _attrs: ReturnType<typeof attrStringToMap>\n      _tag: string\n    }>\n  }\n\n  const parser = parserFor(rules)\n  const emitter: Function = reactFor(ruleOutput(rules))\n\n  const jsx = compile(markdown)\n\n  if (footnotes.length) {\n    return (\n      <div>\n        {jsx}\n        <footer key=\"footer\">\n          {footnotes.map(function createFootnote(def) {\n            return (\n              <div id={options.slugify(def._identifier)} key={def._identifier}>\n                {def._identifier}\n                {emitter(parser(def._footnote, { _inline: true }))}\n              </div>\n            )\n          })}\n        </footer>\n      </div>\n    )\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\nconst Markdown: React.FC<{\n  [key: string]: any\n  children: string\n  options?: MarkdownToJSX.Options\n}> = ({ children, options, ...props }) => {\n  return React.cloneElement(\n    compiler(children, options),\n    props as JSX.IntrinsicAttributes\n  )\n}\n\nexport default Markdown\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport dayjs from 'dayjs';\nimport Markdown from 'markdown-to-jsx';\n\nconst Job = ({\n  data: {\n    name, position, url, startDate, endDate, summary, highlights,\n  },\n}) => (\n  <article className=\"jobs-container\">\n    <header>\n      <h4><a href={url}>{name}</a> - {position}</h4>\n      <p className=\"daterange\"> {dayjs(startDate).format('MMMM YYYY')} - {endDate ? dayjs(endDate).format('MMMM YYYY') : 'PRESENT'}</p>\n    </header>\n    {summary ? (\n      <Markdown\n        options={{\n          overrides: {\n            p: {\n              props: {\n                className: 'summary',\n              },\n            },\n          },\n        }}\n      >\n        {summary}\n      </Markdown>\n    ) : null}\n    {highlights ? (\n      <ul className=\"points\">\n        {highlights.map((highlight) => (\n          <li key={highlight}>{highlight}</li>\n        ))}\n      </ul>\n    ) : null}\n  </article>\n);\n\nJob.propTypes = {\n  data: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    position: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired,\n    startDate: PropTypes.string.isRequired,\n    endDate: PropTypes.string,\n    summary: PropTypes.string,\n    highlights: PropTypes.arrayOf(PropTypes.string.isRequired),\n  }).isRequired,\n};\n\nexport default Job;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Job from './Experience/Job';\n\nconst Experience = ({ data }) => (\n  <div className=\"experience\">\n    <div className=\"link-to\" id=\"experience\" />\n    <div className=\"title\">\n      <h3>Experience</h3>\n    </div>\n    {data.map((job) => (\n      <Job\n        data={job}\n        key={`${job.name}-${job.position}`}\n      />\n    ))}\n  </div>\n);\n\nExperience.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.exact({\n    name: PropTypes.string,\n    position: PropTypes.string,\n    url: PropTypes.string,\n    startDate: PropTypes.string,\n    endDate: PropTypes.string,\n    highlights: PropTypes.arrayOf(PropTypes.string),\n    summary: PropTypes.string,\n  })),\n};\n\nExperience.defaultProps = {\n  data: [],\n};\n\nexport default Experience;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst References = () => (\n  <div className=\"references\">\n    <div className=\"link-to\" id=\"references\" />\n    <div className=\"title\">\n      <Link to=\"/contact\">\n        <h3>References are available upon request</h3>\n      </Link>\n    </div>\n  </div>\n);\n\nexport default References;\n","const degrees = [\n  {\n    school: 'Santa Clara University',\n    degree: 'M.S. Computer Science and Engineering',\n    link: '',\n    year: 2023,\n  },\n  {\n    school: 'Guangdong University of Foreign Studies',\n    degree: 'B.A. Advertising',\n    link: '',\n    year: 2015,\n  },\n];\n\nexport default degrees;\n","/**\n * @typedef {Object} Position\n * Conforms to https://jsonresume.org/schema/\n *\n * @property {string} name - Name of the company\n * @property {string} position - Position title\n * @property {string} url - Company website\n * @property {string} startDate - Start date of the position in YYYY-MM-DD format\n * @property {string|undefined} endDate - End date of the position in YYYY-MM-DD format.\n * If undefined, the position is still active.\n * @property {string|undefined} summary - html/markdown summary of the position\n * @property {string[]} highlights - plain text highlights of the position (bulleted list)\n */\nconst work = [\n  {\n    name: 'Hack Health',\n    position: 'software engineer',\n    url: '',\n    startDate: '2023-04',\n    summary: 'PosePro is the application that I developed at this health communication startup.',\n    highlights: [\n      'developed PosePro,an app that detects posture‐related conditions and provides real‐time prompts and tips for improving,usingDjango,React.',\n      'developed a Growth module with Postgres for CRUD operations and RESTful APIs, enabling users to monitor posture progress,leading to 10% uptick in user retention and alleviating concerns about data privacy.',\n      'implemented a real‐time detection module with react‐webcam and socket.io to send video feed to a WebSocketAPI,achieving a 30% faster response time, and developed an ‘AI doctor’ module that returns a posture diagnosis based on user‐uploaded video.',\n      'deployed OpenPose on a Flask server for 3Dpose estimation with OpenCV,NumPy and FFmpeg,resulting in a 10% accuracy improvement.',\n    ],\n  },\n  {\n    name: 'KODEE',\n    position: 'Co-founder',\n    url: '',\n    startDate: '2023-06',\n    summary: 'Kodee is a language service application that aims to become best ally to conference interpreters.',\n    highlights: [\n      'developed an interpretation tool using Spring, React and MUI that displays real‐time terminology prompts through glossaries.',\n      'leveraged Web Speech API for speech transcription, deployed LibreTranslate on a local server with RESTful APIs to improve accuracy by 23%.',\n      'managed user login with JWT tokens and contextAPI to encrypt user information,resulting in a 13% increase in user numbers.',\n      'managed glossaries with PostgreSQL for CRUD operations and Redis for recently accessed entries to increase response time by 30%.',\n      'containerized the frontend and backend using Docker,then deployed with Jenkins and Kubernetes.',\n    ],\n  },\n  {\n    name: 'SCU Imaginarium Lab',\n    position: 'Research Assistant',\n    url: '',\n    startDate: '2023-03',\n    summary: 'Kodee is a language service application that aims to become best ally to conference interpreters.',\n    highlights: [\n      'executed distributed crawls using Scrapy‐Redis to generate a proprietary dataset for training, resulting in a 120% increase in dataset size.',\n      `developed a Flask backend application that turns a movement clip into an avatar animation with OpenPose,pandas,Blender python scripts\nand Git for version control, leading to a stronger lab portfolio and an increase in funding by 12%.`,\n      'utilized Conda for environment control and deployed comparable 3D pose estimation models on a Unix server with Pytorch for comparison.',\n      'led a team of six to leverage NumPy, scipy, and OpenCV to detect and clean NaN, augment the datasets with random masks,normalize the reference system and merge different datasets, which led to a paper accepted by IROS, a Robotics and AI conference with 78 h5‐index.',\n    ],\n  },\n];\n\nexport default work;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Main from '../layouts/Main';\n\nimport Education from '../components/Resume/Education';\nimport Experience from '../components/Resume/Experience';\n\nimport References from '../components/Resume/References';\n\nimport degrees from '../data/resume/degrees';\nimport work from '../data/resume/work';\n\n// NOTE: sections are displayed in order defined.\nconst sections = {\n  Education: () => <Education data={degrees} />,\n  Experience: () => <Experience data={work} />,\n  References: () => <References />,\n};\n\nconst Resume = () => (\n  <Main\n    title=\"Resume\"\n    description=\"\"\n  >\n    <article className=\"post\" id=\"resume\">\n      <header>\n        <div className=\"title\">\n          <h2><Link to=\"resume\">Resume</Link></h2>\n          <div className=\"link-container\">\n            {Object.keys(sections).map((sec) => (\n              <h4 key={sec}>\n                <a href={`#${sec.toLowerCase()}`}>{sec}</a>\n              </h4>))}\n          </div>\n        </div>\n      </header>\n      {Object.entries(sections).map(([name, Section]) => (\n        <Section key={name} />\n      ))}\n    </article>\n  </Main>\n);\n\nexport default Resume;\n","!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):(t=\"undefined\"!=typeof globalThis?globalThis:t||self).dayjs=e()}(this,(function(){\"use strict\";var t=1e3,e=6e4,n=36e5,r=\"millisecond\",i=\"second\",s=\"minute\",u=\"hour\",a=\"day\",o=\"week\",c=\"month\",f=\"quarter\",h=\"year\",d=\"date\",l=\"Invalid Date\",$=/^(\\d{4})[-/]?(\\d{1,2})?[-/]?(\\d{0,2})[Tt\\s]*(\\d{1,2})?:?(\\d{1,2})?:?(\\d{1,2})?[.:]?(\\d+)?$/,y=/\\[([^\\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,M={name:\"en\",weekdays:\"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),months:\"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\"),ordinal:function(t){var e=[\"th\",\"st\",\"nd\",\"rd\"],n=t%100;return\"[\"+t+(e[(n-20)%10]||e[n]||e[0])+\"]\"}},m=function(t,e,n){var r=String(t);return!r||r.length>=e?t:\"\"+Array(e+1-r.length).join(n)+t},v={s:m,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return(e<=0?\"+\":\"-\")+m(r,2,\"0\")+\":\"+m(i,2,\"0\")},m:function t(e,n){if(e.date()<n.date())return-t(n,e);var r=12*(n.year()-e.year())+(n.month()-e.month()),i=e.clone().add(r,c),s=n-i<0,u=e.clone().add(r+(s?-1:1),c);return+(-(r+(n-i)/(s?i-u:u-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(t){return{M:c,y:h,w:o,d:a,D:d,h:u,m:s,s:i,ms:r,Q:f}[t]||String(t||\"\").toLowerCase().replace(/s$/,\"\")},u:function(t){return void 0===t}},g=\"en\",D={};D[g]=M;var p=function(t){return t instanceof b},S=function t(e,n,r){var i;if(!e)return g;if(\"string\"==typeof e){var s=e.toLowerCase();D[s]&&(i=s),n&&(D[s]=n,i=s);var u=e.split(\"-\");if(!i&&u.length>1)return t(u[0])}else{var a=e.name;D[a]=e,i=a}return!r&&i&&(g=i),i||!r&&g},w=function(t,e){if(p(t))return t.clone();var n=\"object\"==typeof e?e:{};return n.date=t,n.args=arguments,new b(n)},O=v;O.l=S,O.i=p,O.w=function(t,e){return w(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var b=function(){function M(t){this.$L=S(t.locale,null,!0),this.parse(t)}var m=M.prototype;return m.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(O.u(e))return new Date;if(e instanceof Date)return new Date(e);if(\"string\"==typeof e&&!/Z$/i.test(e)){var r=e.match($);if(r){var i=r[2]-1||0,s=(r[7]||\"0\").substring(0,3);return n?new Date(Date.UTC(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)):new Date(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)}}return new Date(e)}(t),this.$x=t.x||{},this.init()},m.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},m.$utils=function(){return O},m.isValid=function(){return!(this.$d.toString()===l)},m.isSame=function(t,e){var n=w(t);return this.startOf(e)<=n&&n<=this.endOf(e)},m.isAfter=function(t,e){return w(t)<this.startOf(e)},m.isBefore=function(t,e){return this.endOf(e)<w(t)},m.$g=function(t,e,n){return O.u(t)?this[e]:this.set(n,t)},m.unix=function(){return Math.floor(this.valueOf()/1e3)},m.valueOf=function(){return this.$d.getTime()},m.startOf=function(t,e){var n=this,r=!!O.u(e)||e,f=O.p(t),l=function(t,e){var i=O.w(n.$u?Date.UTC(n.$y,e,t):new Date(n.$y,e,t),n);return r?i:i.endOf(a)},$=function(t,e){return O.w(n.toDate()[t].apply(n.toDate(\"s\"),(r?[0,0,0,0]:[23,59,59,999]).slice(e)),n)},y=this.$W,M=this.$M,m=this.$D,v=\"set\"+(this.$u?\"UTC\":\"\");switch(f){case h:return r?l(1,0):l(31,11);case c:return r?l(1,M):l(0,M+1);case o:var g=this.$locale().weekStart||0,D=(y<g?y+7:y)-g;return l(r?m-D:m+(6-D),M);case a:case d:return $(v+\"Hours\",0);case u:return $(v+\"Minutes\",1);case s:return $(v+\"Seconds\",2);case i:return $(v+\"Milliseconds\",3);default:return this.clone()}},m.endOf=function(t){return this.startOf(t,!1)},m.$set=function(t,e){var n,o=O.p(t),f=\"set\"+(this.$u?\"UTC\":\"\"),l=(n={},n[a]=f+\"Date\",n[d]=f+\"Date\",n[c]=f+\"Month\",n[h]=f+\"FullYear\",n[u]=f+\"Hours\",n[s]=f+\"Minutes\",n[i]=f+\"Seconds\",n[r]=f+\"Milliseconds\",n)[o],$=o===a?this.$D+(e-this.$W):e;if(o===c||o===h){var y=this.clone().set(d,1);y.$d[l]($),y.init(),this.$d=y.set(d,Math.min(this.$D,y.daysInMonth())).$d}else l&&this.$d[l]($);return this.init(),this},m.set=function(t,e){return this.clone().$set(t,e)},m.get=function(t){return this[O.p(t)]()},m.add=function(r,f){var d,l=this;r=Number(r);var $=O.p(f),y=function(t){var e=w(l);return O.w(e.date(e.date()+Math.round(t*r)),l)};if($===c)return this.set(c,this.$M+r);if($===h)return this.set(h,this.$y+r);if($===a)return y(1);if($===o)return y(7);var M=(d={},d[s]=e,d[u]=n,d[i]=t,d)[$]||1,m=this.$d.getTime()+r*M;return O.w(m,this)},m.subtract=function(t,e){return this.add(-1*t,e)},m.format=function(t){var e=this,n=this.$locale();if(!this.isValid())return n.invalidDate||l;var r=t||\"YYYY-MM-DDTHH:mm:ssZ\",i=O.z(this),s=this.$H,u=this.$m,a=this.$M,o=n.weekdays,c=n.months,f=n.meridiem,h=function(t,n,i,s){return t&&(t[n]||t(e,r))||i[n].slice(0,s)},d=function(t){return O.s(s%12||12,t,\"0\")},$=f||function(t,e,n){var r=t<12?\"AM\":\"PM\";return n?r.toLowerCase():r};return r.replace(y,(function(t,r){return r||function(t){switch(t){case\"YY\":return String(e.$y).slice(-2);case\"YYYY\":return O.s(e.$y,4,\"0\");case\"M\":return a+1;case\"MM\":return O.s(a+1,2,\"0\");case\"MMM\":return h(n.monthsShort,a,c,3);case\"MMMM\":return h(c,a);case\"D\":return e.$D;case\"DD\":return O.s(e.$D,2,\"0\");case\"d\":return String(e.$W);case\"dd\":return h(n.weekdaysMin,e.$W,o,2);case\"ddd\":return h(n.weekdaysShort,e.$W,o,3);case\"dddd\":return o[e.$W];case\"H\":return String(s);case\"HH\":return O.s(s,2,\"0\");case\"h\":return d(1);case\"hh\":return d(2);case\"a\":return $(s,u,!0);case\"A\":return $(s,u,!1);case\"m\":return String(u);case\"mm\":return O.s(u,2,\"0\");case\"s\":return String(e.$s);case\"ss\":return O.s(e.$s,2,\"0\");case\"SSS\":return O.s(e.$ms,3,\"0\");case\"Z\":return i}return null}(t)||i.replace(\":\",\"\")}))},m.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},m.diff=function(r,d,l){var $,y=this,M=O.p(d),m=w(r),v=(m.utcOffset()-this.utcOffset())*e,g=this-m,D=function(){return O.m(y,m)};switch(M){case h:$=D()/12;break;case c:$=D();break;case f:$=D()/3;break;case o:$=(g-v)/6048e5;break;case a:$=(g-v)/864e5;break;case u:$=g/n;break;case s:$=g/e;break;case i:$=g/t;break;default:$=g}return l?$:O.a($)},m.daysInMonth=function(){return this.endOf(c).$D},m.$locale=function(){return D[this.$L]},m.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=S(t,e,!0);return r&&(n.$L=r),n},m.clone=function(){return O.w(this.$d,this)},m.toDate=function(){return new Date(this.valueOf())},m.toJSON=function(){return this.isValid()?this.toISOString():null},m.toISOString=function(){return this.$d.toISOString()},m.toString=function(){return this.$d.toUTCString()},M}(),_=b.prototype;return w.prototype=_,[[\"$ms\",r],[\"$s\",i],[\"$m\",s],[\"$H\",u],[\"$W\",a],[\"$M\",c],[\"$y\",h],[\"$D\",d]].forEach((function(t){_[t[1]]=function(e){return this.$g(e,t[0],t[1])}})),w.extend=function(t,e){return t.$i||(t(e,b,w),t.$i=!0),w},w.locale=S,w.isDayjs=p,w.unix=function(t){return w(1e3*t)},w.en=D[g],w.Ls=D,w.p={},w}));"],"names":["_ref","data","_jsx","className","children","_jsxs","degree","href","link","school","year","Education","id","map","Degree","defaultProps","ATTRIBUTE_TO_JSX_PROP_MAP","reduce","obj","x","toLowerCase","for","namedCodesToUnicode","amp","apos","gt","lt","nbsp","quot","DO_NOT_PROCESS_HTML_ELEMENTS","ATTR_EXTRACTOR_R","AUTOLINK_MAILTO_CHECK_R","BLOCK_END_R","BLOCKQUOTE_R","BLOCKQUOTE_TRIM_LEFT_MULTILINE_R","BREAK_LINE_R","BREAK_THEMATIC_R","CODE_BLOCK_FENCED_R","CODE_BLOCK_R","CODE_INLINE_R","CONSECUTIVE_NEWLINE_R","CR_NEWLINE_R","FOOTNOTE_R","FOOTNOTE_REFERENCE_R","FORMFEED_R","GFM_TASK_R","HEADING_R","HEADING_SETEXT_R","HTML_BLOCK_ELEMENT_R","HTML_CHAR_CODE_R","HTML_COMMENT_R","HTML_CUSTOM_ATTR_R","HTML_SELF_CLOSING_ELEMENT_R","INTERPOLATION_R","LINK_AUTOLINK_BARE_URL_R","LINK_AUTOLINK_MAILTO_R","LINK_AUTOLINK_R","CAPTURE_LETTER_AFTER_HYPHEN","NP_TABLE_R","REFERENCE_IMAGE_OR_LINK","REFERENCE_IMAGE_R","REFERENCE_LINK_R","SQUARE_BRACKETS_R","SHOULD_RENDER_AS_BLOCK_R","TAB_R","TABLE_SEPARATOR_R","TABLE_TRIM_PIPES","TABLE_CELL_END_TRIM","TABLE_CENTER_ALIGN","TABLE_LEFT_ALIGN","TABLE_RIGHT_ALIGN","TEXT_BOLD_R","TEXT_EMPHASIZED_R","TEXT_MARKED_R","TEXT_STRIKETHROUGHED_R","TEXT_ESCAPED_R","TEXT_PLAIN_R","TRIM_STARTING_NEWLINES","HTML_LEFT_TRIM_AMOUNT_R","UNESCAPE_URL_R","LIST_ITEM_END_R","LIST_LOOKBEHIND_R","ORDERED_LIST_BULLET","UNORDERED_LIST_BULLET","generateListItemPrefix","type","ORDERED_LIST_ITEM_PREFIX","UNORDERED_LIST_ITEM_PREFIX","generateListItemPrefixRegex","RegExp","ORDERED_LIST_ITEM_PREFIX_R","UNORDERED_LIST_ITEM_PREFIX_R","generateListItemRegex","ORDERED_LIST_ITEM_R","UNORDERED_LIST_ITEM_R","generateListRegex","bullet","ORDERED_LIST_R","UNORDERED_LIST_R","generateListRule","h","ordered","LIST_R","LIST_ITEM_R","LIST_ITEM_PREFIX_R","_match","source","state","prevCapture","isStartOfLine","exec","_list","_inline","_simple","_order","Priority","HIGH","_parse","capture","parse","start","items","replace","match","lastItemWasAParagraph","_items","item","i","space","length","spaceRegex","content","isLastItem","thisItemIsAParagraph","indexOf","adjustedContent","oldStateInline","oldStateList","result","_ordered","_start","_react","node","output","key","_key","LINK_R","IMAGE_R","NON_PARAGRAPH_BLOCK_SYNTAXES","BLOCK_SYNTAXES","slugify","str","parseTableAlignCapture","alignCapture","test","parseTableRow","prevInTable","_inTable","tableRow","trim","cells","forEach","push","_content","parseTable","header","align","split","rowText","_align","_cells","_header","getTableStyle","colIndex","textAlign","inlineRegex","regex","simpleInlineRegex","blockRegex","anyScopeRegex","matchParagraph","prevCapturedString","endsWith","every","line","some","captured","trimEnd","sanitizeUrl","url","decodeURIComponent","e","unescapeUrl","rawUrlString","parseInline","isCurrentlyInline","isCurrentlySimple","parseSimpleInline","parseBlock","parseCaptureInline","captureNothing","renderNothing","cx","args","filter","Boolean","join","get","src","path","fb","ptr","frags","shift","compiler","markdown","options","overrides","createElementFn","createElement","React","tag","props","overrideProps","override","undefined","compile","input","forceInline","forceBlock","arr","emitter","parser","pop","wrapper","jsx","forceWrapper","attrStringToMap","attributes","raw","index","delimiterIdx","slice","_","letter","toUpperCase","value","first","mappedKey","normalizedValue","styles","kvPair","substr","footnotes","refs","rules","blockQuote","breakLine","__","breakThematic","codeBlock","MAX","_lang","_attrs","codeFenced","codeInline","LOW","footnote","_footnote","_identifier","footnoteReference","_target","gfmTask","_completed","checked","readOnly","heading","_id","_level","headingSetext","htmlComment","image","_alt","_title","alt","title","linkAngleBraceStyleDetector","linkBareUrlDetector","_inAnchor","linkMailtoDetector","address","target","orderedList","unorderedList","newlineCoalescer","paragraph","ref","refImage","refLink","_fallbackContent","table","style","row","c","tableSeparator","text","MIN","full","inner","textBolded","MED","textEmphasized","textEscaped","textMarked","textStrikethroughed","disableParsingRawHTML","htmlBlock","whitespace","trimmer","trimmed","parseFunc","r","tagName","noInnerParse","_noInnerParse","_tag","htmlSelfClosing","outputFunc","ruleList","Object","keys","nestedParse","ruleType","rule","currCaptureString","substring","parsed","sort","typeA","typeB","orderA","orderB","ast","nestedReactOutput","Array","isArray","oldKey","lastWasString","nodeOut","isString","def","_ref$data","name","position","startDate","endDate","summary","highlights","dayjs","format","Markdown","p","highlight","Experience","job","Job","concat","Link","to","sections","_Education","degrees","_Experience","work","References","_References","Main","description","sec","entries","_ref2","_slicedToArray","Section","module","exports","t","n","s","u","a","o","f","d","l","$","y","M","weekdays","months","ordinal","m","String","v","z","utcOffset","Math","abs","floor","date","month","clone","add","ceil","w","D","ms","Q","g","b","S","arguments","O","locale","$L","utc","$u","$x","$offset","this","prototype","$d","Date","NaN","UTC","init","$y","getFullYear","$M","getMonth","$D","getDate","$W","getDay","$H","getHours","$m","getMinutes","$s","getSeconds","$ms","getMilliseconds","$utils","isValid","toString","isSame","startOf","endOf","isAfter","isBefore","$g","set","unix","valueOf","getTime","toDate","apply","$locale","weekStart","$set","min","daysInMonth","Number","round","subtract","invalidDate","meridiem","monthsShort","weekdaysMin","weekdaysShort","getTimezoneOffset","diff","toJSON","toISOString","toUTCString","extend","$i","isDayjs","en","Ls"],"sourceRoot":""}